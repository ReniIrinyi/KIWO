{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,YACpC,IAAIC,EAAIF,SAASG,eAAe,QAC5BC,EAAQJ,SAASG,eAAe,SAChCE,EAAIL,SAASG,eAAe,WAChC,MAAMG,EAASN,SAASG,eAAe,WA8BtC,WAsDC,SAASI,EAAiBC,GACxBA,EAAMC,iBACN,IAAIC,EAAOF,EAAMG,OACbC,EAvDN,SAAqBF,GACnB,IACIG,EADAC,EAAWJ,EAAKI,SAGhBC,EAASC,OAAOC,KAAKH,GACtBI,QAAO,SAAUC,GAChB,MAAyB,aAArBL,EAASK,GAAGC,OACdP,EAAWC,EAASK,GAAGE,OAChB,EAGX,IACCC,KAAI,SAAUH,GACb,YAAyBI,IAArBT,EAASK,GAAGC,KACPN,EAASK,GAAGC,KAEVN,EAASK,GAAGK,OAAS,EACvBV,EAASK,GAAGM,KAAK,GAAGL,UADtB,CAGT,IACCF,QAAO,SAAUO,EAAMC,EAAKC,GAC3B,OAAOA,EAAKC,QAAQH,IAASC,GAAOD,CACtC,IAEEb,EAAW,CAAC,EAyBhB,OAxBAG,EAAOc,SAAQ,SAAUT,GACvB,IAAIU,EAAUhB,EAASM,GAMvB,GAHAR,EAASQ,GAAQU,EAAQT,MAGrBS,EAAQN,OAAQ,CAElB,IADA,IAAIO,EAAO,GACFC,EAAI,EAAGA,EAAIF,EAAQN,OAAQQ,IAAK,CACvC,IAAIP,EAAOK,EAAQL,KAAKO,IACpBP,EAAKQ,SAAWR,EAAKS,WACvBH,EAAKI,KAAKV,EAAKJ,MAEnB,CACAT,EAASQ,GAAQW,EAAKK,KAAK,KAC7B,CACF,IAGAxB,EAASyB,kBAAoBC,KAAKC,UAAUxB,GAC5CH,EAAS4B,oBAAsB9B,EAAK+B,QAAQC,OAAS,YACrD9B,EAAS+B,oBAAsBjC,EAAK+B,QAAQG,OAAS,GAE9C,CAAEb,KAAMnB,EAAUC,SAAUA,EACrC,CAKiBgC,CAAYnC,GACvBqB,EAAOnB,EAASmB,KAQpB,GAPAzB,EAAOwC,UACL,wEACF5C,EAAEmB,MAAQ,GACVjB,EAAMiB,MAAQ,GACdhB,EAAEgB,MAAQ,GAGNT,EAASC,SAGX,OAFAP,EAAOwC,UACL,0FACK,GAoCX,SAA2BpC,GAEzB,IADA,IAAIqC,EAAUrC,EAAKsC,iBAAiB,UAC3BhB,EAAI,EAAGA,EAAIe,EAAQvB,OAAQQ,IAClCe,EAAQf,GAAGiB,UAAW,CAE1B,CAtCEC,CAAkBxC,GAClB,IAAIyC,EAAMzC,EAAK0C,OACXC,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQJ,GAEjBE,EAAIG,iBAAiB,eAAgB,qCACrCH,EAAII,mBAAqB,WACvB,GAAuB,IAAnBJ,EAAIK,YAAmC,MAAfL,EAAIM,OAAgB,CAC9CjD,EAAKkD,QACL,IAAIC,EAAenD,EAAKT,cAAc,kBAClC4D,IACFA,EAAaC,MAAMC,QAAU,QAE/B,IAAIC,EAAkBtD,EAAKT,cAAc,qBACrC+D,IACFA,EAAgBF,MAAMC,QAAU,QAEpC,CACF,EAEA,IAAIE,EAAUjD,OAAOC,KAAKc,GACvBT,KAAI,SAAUH,GACb,OAAO+C,mBAAmB/C,GAAK,IAAM+C,mBAAmBnC,EAAKZ,GAC/D,IACCiB,KAAK,KACRiB,EAAIc,KAAKF,EACX,CAKAjE,SAASoE,iBAAiB,oBAH1B,WACErE,EAAKqE,iBAAiB,SAAU7D,GAAkB,EACpD,IACsD,EAQxD,CA/GC","sources":["public/mailer.js"],"sourcesContent":["const form = document.querySelector(\"#my-form\");\nlet t = document.getElementById(\"name\");\nlet email = document.getElementById(\"email\");\nlet n = document.getElementById(\"message\");\nconst status = document.getElementById(\"status\");\n\n//\n\n// e.addEventListener(\"submit\", (e) => {\n//   e.preventDefault(), console.log(\"submitted\");\n\n//   let l = {\n//       name: t.value,\n//       email: email.value,\n//       subject: \"neue Anmeldung\",\n//       message: n.value,\n//     },\n//     o = new XMLHttpRequest();\n//   o.open(\"POST\", \"/\"),\n//     o.setRequestHeader(\"content-type\", \"application/json\"),\n//     (o.onload = function () {\n//       console.log(o.responseText),\n//         \"sucess\" == o.responseText\n//           ? ((status.innerHTML =\n//               \"Vielen Dank f端r Ihre Nachricht. Wir werden Sie in K端rze kontaktieren!\"),\n//             (t.value = \"\"),\n//             (email.value = \"\"),\n//             (n.value = \"\"))\n//           : (status.innerHTML =\n//               \"Oops! Es gab ein Problem beim Absenden Ihres Formulars. Bitte versuchen Sie es erneut!\");\n//     }),\n//     o.send(JSON.stringify(l));\n// });\n\n(function () {\n  // get all data in form and return object\n  function getFormData(form) {\n    var elements = form.elements;\n    var honeypot;\n\n    var fields = Object.keys(elements)\n      .filter(function (k) {\n        if (elements[k].name === \"honeypot\") {\n          honeypot = elements[k].value;\n          return false;\n        }\n        return true;\n      })\n      .map(function (k) {\n        if (elements[k].name !== undefined) {\n          return elements[k].name;\n          // special case for Edge's html collection\n        } else if (elements[k].length > 0) {\n          return elements[k].item(0).name;\n        }\n      })\n      .filter(function (item, pos, self) {\n        return self.indexOf(item) == pos && item;\n      });\n\n    var formData = {};\n    fields.forEach(function (name) {\n      var element = elements[name];\n\n      // singular form elements just have one value\n      formData[name] = element.value;\n\n      // when our element has multiple items, get their values\n      if (element.length) {\n        var data = [];\n        for (var i = 0; i < element.length; i++) {\n          var item = element.item(i);\n          if (item.checked || item.selected) {\n            data.push(item.value);\n          }\n        }\n        formData[name] = data.join(\", \");\n      }\n    });\n\n    // add form-specific values into the data\n    formData.formDataNameOrder = JSON.stringify(fields);\n    formData.formGoogleSheetName = form.dataset.sheet || \"responses\"; // default sheet name\n    formData.formGoogleSendEmail = form.dataset.email || \"\"; // no email by default\n\n    return { data: formData, honeypot: honeypot };\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    var form = event.target;\n    var formData = getFormData(form);\n    var data = formData.data;\n    status.innerHTML =\n      \"Vielen Dank f端r Ihre Nachricht. Wir werden Sie in K端rze kontaktieren!\";\n    t.value = \"\";\n    email.value = \"\";\n    n.value = \"\";\n\n    // If a honeypot field is filled, assume it was done so by a spam bot.\n    if (formData.honeypot) {\n      status.innerHTML =\n        \"Oops! Es gab ein Problem beim Absenden Ihres Formulars. Bitte versuchen Sie es erneut!\";\n      return false;\n    }\n\n    disableAllButtons(form);\n    var url = form.action;\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", url);\n    // xhr.withCredentials = true;\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        form.reset();\n        var formElements = form.querySelector(\".form-elements\");\n        if (formElements) {\n          formElements.style.display = \"none\"; // hide form\n        }\n        var thankYouMessage = form.querySelector(\".thankyou_message\");\n        if (thankYouMessage) {\n          thankYouMessage.style.display = \"block\";\n        }\n      }\n    };\n    // url encode form data for sending as post data\n    var encoded = Object.keys(data)\n      .map(function (k) {\n        return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]);\n      })\n      .join(\"&\");\n    xhr.send(encoded);\n  }\n\n  function loaded() {\n    form.addEventListener(\"submit\", handleFormSubmit, false);\n  }\n  document.addEventListener(\"DOMContentLoaded\", loaded, false);\n\n  function disableAllButtons(form) {\n    var buttons = form.querySelectorAll(\"button\");\n    for (var i = 0; i < buttons.length; i++) {\n      buttons[i].disabled = true;\n    }\n  }\n})();\n"],"names":["$88a66ae20a5572f7$var$form","document","querySelector","$88a66ae20a5572f7$var$t","getElementById","$88a66ae20a5572f7$var$email","$88a66ae20a5572f7$var$n","$88a66ae20a5572f7$var$status","handleFormSubmit","event","preventDefault","form","target","formData","honeypot","elements","fields","Object","keys","filter","k","name","value","map","undefined","length","item","pos","self","indexOf","forEach","element","data","i","checked","selected","push","join","formDataNameOrder","JSON","stringify","formGoogleSheetName","dataset","sheet","formGoogleSendEmail","email","getFormData","innerHTML","buttons","querySelectorAll","disabled","disableAllButtons","url","action","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","reset","formElements","style","display","thankYouMessage","encoded","encodeURIComponent","send","addEventListener"],"version":3,"file":"index.15891021.js.map"}